<?xml version="1.0" encoding="UTF-8"?>
<UDE:Procedure xmlns:UDE="http://www.sap.com/ndb/SQLCoreModelUDE.ecore" xmlns:DataTypes="http://www.sap.com/ndb/SQLCoreModelDataTypes.ecore" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="get_bp_addresses_ce" schemaVersion="2" procedureType="procedure" runWithInvokerPrivileges="true" language="SQLSCRIPT" accessMode="ReadOnly">
<descriptions defaultDescription=""/>
<metadata changedAt ="2018-05-21 16:18:59.388" createdAt="2018-05-21 16:11:43.889"/>
<origin/>
<schema id="_SYS_BIC"/>
<definition>   
BEGIN
	bp_addresses = select a.PartnerId, a.PartnerRole, a.EmailAddress, a.CompanyName, b.City, b.Street 
					from &quot;SAP_HANA_DEMO&quot;.&quot;sap.hana.democontent.epm.data::MD.BusinessPartner&quot; a
					join &quot;sap.hana.democontent.epm.data::MD.Addresses&quot; b on a.&quot;ADDRESSES.ADDRESSID&quot; = b.AddressId
					where a.PartnerRole = :partnerrole;
					
	lt_bp = CE_COLUMN_TABLE(&quot;SAP_HANA_DEMO&quot;.&quot;sap.hana.democontent.epm.data::MD.BusinessPartner&quot;, [ &quot;PARTNERID&quot;, &quot;PARTNERROLE&quot;, &quot;EMAILADDRESS&quot;, &quot;COMPANYNAME&quot;, &quot;ADDRESSES.ADDRESSID&quot;]);
	
	lt_bp_proj = CE_PROJECTION(:lt_bp, [ &quot;PARTNERID&quot;, &quot;PARTNERROLE&quot;, &quot;EMAILADDRESS&quot;, &quot;COMPANYNAME&quot;, &quot;ADDRESSES.ADDRESSID&quot; as &quot;ADDRESSID&quot;], &apos;&quot;PARTNERROLE&quot; = :partnerrole&apos;);
	
	lt_address = CE_COLUMN_TABLE(&quot;SAP_HANA_DEMO&quot;.&quot;sap.hana.democontent.epm.data::MD.Addresses&quot;, [&quot;ADDRESSID&quot;, &quot;CITY&quot;, &quot;STREET&quot; ]);
	
	bp_addresses_ce = CE_JOIN( :lt_bp_proj, :lt_address, [&quot;ADDRESSID&quot;], [ &quot;PARTNERID&quot;, &quot;PARTNERROLE&quot;, &quot;EMAILADDRESS&quot;, &quot;COMPANYNAME&quot;, &quot;CITY&quot;, &quot;STREET&quot;, &quot;ADDRESSID&quot;]);
END;</definition>
<defaultSchema schemaName="SYSTEM"/>
<parameters id="partnerrole" paramType="IN">
  <type xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="3"/>
</parameters>
<parameters id="bp_addresses_ce" paramType="OUT">
	<type xsi:type="DataTypes:TableDataType" id="t_bp_addresses">
	  <columns id="PARTNERID">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="10"/>
	  </columns>
	  <columns id="PARTNERROLE">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="3"/>
	  </columns>
	  <columns id="EMAILADDRESS">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="255"/>
	  </columns>
	  <columns id="COMPANYNAME">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="80"/>
	  </columns>
	  <columns id="CITY">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="40"/>
	  </columns>
	  <columns id="STREET">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="60"/>
	  </columns>
	  <columns id="ADDRESSID">
		  <datatypeSQL xsi:type="DataTypes:CharacterStringSQLDataType" id="NVARCHAR" length="10"/>
	  </columns>
		<schema id="_SYS_BIC"/>
	</type>
</parameters>
<localTableType>/*
You can create new table types and use them as input and output parameters in a procedure.
To do this, define the table types using SQL syntax, for example:
CREATE TYPE &lt;Type Name&gt; AS TABLE (&lt;Field Name1&gt; &lt;Field Type1&gt;, &lt;Field Name2&gt; &lt;Field Type2&gt;,...);
*/
create type t_bp_addresses as table (
	PARTNERID nvarchar(10),
	PARTNERROLE nvarchar(3),
	EMAILADDRESS nvarchar(255),
	COMPANYNAME nvarchar(80),
	CITY nvarchar(40),
	STREET nvarchar(60),
	ADDRESSID nvarchar(10)
)</localTableType>
<header>CREATE PROCEDURE get_bp_addresses_ce (
	partnerrole nvarchar(3),
	out bp_addresses_ce t_bp_addresses
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA &lt;default_schema_name&gt;
	READS SQL DATA AS</header>
</UDE:Procedure>